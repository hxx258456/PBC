// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Pyramid_GetOrganization_FullMethodName    = "/api.pyramid_manage.v1.pyramid/GetOrganization"
	Pyramid_CreateOrganization_FullMethodName = "/api.pyramid_manage.v1.pyramid/CreateOrganization"
)

// PyramidClient is the client API for Pyramid service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PyramidClient interface {
	GetOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error)
	CreateOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*BaseReply, error)
}

type pyramidClient struct {
	cc grpc.ClientConnInterface
}

func NewPyramidClient(cc grpc.ClientConnInterface) PyramidClient {
	return &pyramidClient{cc}
}

func (c *pyramidClient) GetOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*Organization, error) {
	out := new(Organization)
	err := c.cc.Invoke(ctx, Pyramid_GetOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pyramidClient) CreateOrganization(ctx context.Context, in *Organization, opts ...grpc.CallOption) (*BaseReply, error) {
	out := new(BaseReply)
	err := c.cc.Invoke(ctx, Pyramid_CreateOrganization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PyramidServer is the server API for Pyramid service.
// All implementations must embed UnimplementedPyramidServer
// for forward compatibility
type PyramidServer interface {
	GetOrganization(context.Context, *Organization) (*Organization, error)
	CreateOrganization(context.Context, *Organization) (*BaseReply, error)
	mustEmbedUnimplementedPyramidServer()
}

// UnimplementedPyramidServer must be embedded to have forward compatible implementations.
type UnimplementedPyramidServer struct {
}

func (UnimplementedPyramidServer) GetOrganization(context.Context, *Organization) (*Organization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganization not implemented")
}
func (UnimplementedPyramidServer) CreateOrganization(context.Context, *Organization) (*BaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrganization not implemented")
}
func (UnimplementedPyramidServer) mustEmbedUnimplementedPyramidServer() {}

// UnsafePyramidServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PyramidServer will
// result in compilation errors.
type UnsafePyramidServer interface {
	mustEmbedUnimplementedPyramidServer()
}

func RegisterPyramidServer(s grpc.ServiceRegistrar, srv PyramidServer) {
	s.RegisterService(&Pyramid_ServiceDesc, srv)
}

func _Pyramid_GetOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyramidServer).GetOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pyramid_GetOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyramidServer).GetOrganization(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

func _Pyramid_CreateOrganization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Organization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PyramidServer).CreateOrganization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Pyramid_CreateOrganization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PyramidServer).CreateOrganization(ctx, req.(*Organization))
	}
	return interceptor(ctx, in, info, handler)
}

// Pyramid_ServiceDesc is the grpc.ServiceDesc for Pyramid service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Pyramid_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.pyramid_manage.v1.pyramid",
	HandlerType: (*PyramidServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrganization",
			Handler:    _Pyramid_GetOrganization_Handler,
		},
		{
			MethodName: "CreateOrganization",
			Handler:    _Pyramid_CreateOrganization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
