// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.1
// - protoc             v4.22.2
// source: api.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPyramidCreateOrganization = "/api.pyramid_manage.v1.pyramid/CreateOrganization"
const OperationPyramidGetOrganization = "/api.pyramid_manage.v1.pyramid/GetOrganization"

type PyramidHTTPServer interface {
	CreateOrganization(context.Context, *Organization) (*BaseReply, error)
	GetOrganization(context.Context, *Organization) (*Organization, error)
}

func RegisterPyramidHTTPServer(s *http.Server, srv PyramidHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/pyramid/sys_chain/organization", _Pyramid_GetOrganization0_HTTP_Handler(srv))
	r.POST("/api/v1/pyramid/sys_chain/organization", _Pyramid_CreateOrganization0_HTTP_Handler(srv))
}

func _Pyramid_GetOrganization0_HTTP_Handler(srv PyramidHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Organization
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPyramidGetOrganization)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrganization(ctx, req.(*Organization))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Organization)
		return ctx.Result(200, reply)
	}
}

func _Pyramid_CreateOrganization0_HTTP_Handler(srv PyramidHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in Organization
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPyramidCreateOrganization)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrganization(ctx, req.(*Organization))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BaseReply)
		return ctx.Result(200, reply)
	}
}

type PyramidHTTPClient interface {
	CreateOrganization(ctx context.Context, req *Organization, opts ...http.CallOption) (rsp *BaseReply, err error)
	GetOrganization(ctx context.Context, req *Organization, opts ...http.CallOption) (rsp *Organization, err error)
}

type PyramidHTTPClientImpl struct {
	cc *http.Client
}

func NewPyramidHTTPClient(client *http.Client) PyramidHTTPClient {
	return &PyramidHTTPClientImpl{client}
}

func (c *PyramidHTTPClientImpl) CreateOrganization(ctx context.Context, in *Organization, opts ...http.CallOption) (*BaseReply, error) {
	var out BaseReply
	pattern := "/api/v1/pyramid/sys_chain/organization"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPyramidCreateOrganization))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PyramidHTTPClientImpl) GetOrganization(ctx context.Context, in *Organization, opts ...http.CallOption) (*Organization, error) {
	var out Organization
	pattern := "/api/v1/pyramid/sys_chain/organization"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPyramidGetOrganization))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
